# VARIABLE DESCRIPTIONS:
# survival        Survival
#                 (0 = No; 1 = Yes)
# pclass          Passenger Class
#                 (1 = 1st; 2 = 2nd; 3 = 3rd)
# name            Name
# sex             Sex
# age             Age
# sibsp           Number of Siblings/Spouses Aboard
# parch           Number of Parents/Children Aboard
# ticket          Ticket Number
# fare            Passenger Fare
# cabin           Cabin
# embarked        Port of Embarkation
#                 (C = Cherbourg; Q = Queenstown; S = Southampton)
# 
# SPECIAL NOTES:
# Pclass is a proxy for socio-economic status (SES)
#  1st ~ Upper; 2nd ~ Middle; 3rd ~ Lower
# 
# Age is in Years; Fractional if Age less than One (1)
#  If the Age is Estimated, it is in the form xx.5
# 
# With respect to the family relation variables (i.e. sibsp and parch)
# some relations were ignored.  The following are the definitions used
# for sibsp and parch.
# 
# Sibling:  Brother, Sister, Stepbrother, or Stepsister of Passenger Aboard Titanic
# Spouse:   Husband or Wife of Passenger Aboard Titanic (Mistresses and Fiances Ignored)
# Parent:   Mother or Father of Passenger Aboard Titanic
# Child:    Son, Daughter, Stepson, or Stepdaughter of Passenger Aboard Titanic
# 
# Other family relatives excluded from this study include cousins,
# nephews/nieces, aunts/uncles, and in-laws.  Some children travelled
# only with a nanny, therefore parch=0 for them.  As well, some
# travelled with very close friends or neighbors in a village, however,
# the definitions do not support such relations.

import os
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
%matplotlib inline

os.chdir("/Users/charlmarais/projects/ds4a_titanic")
os.getcwd()

# Load data
train_df = pd.read_csv("train.csv")
test_df  = pd.read_csv("test.csv")

# List variables
list(train_df)
train_df.info()
train_df.head()

######################
# Descriptive Checks #
######################
train_df['Survived'].value_counts(normalize = True)
sns.countplot(train_df['Survived'])

##################################
# Passanger Class #
###################
train_df['Survived'].groupby(train_df['Pclass']).mean()
# Class 3 was clearly less likely to survive

##################################
# Name #
########
train_df['Title'] = train_df['Name'].apply(lambda x: x.split(',')[1]).apply(lambda x: x.split()[0])
train_df['Title'].value_counts()
train_df['Survived'].groupby(train_df['Title']).mean()
# Mr much less likely to survive

##################################
# Sex #
#######
train_df['Sex'].value_counts(normalize = True)
train_df['Survived'].groupby(train_df['Sex']).mean()

##################################
# Age #
#######
train_df['Survived'].groupby(train_df['Age'].isnull()).mean()
pd.qcut(train_df['Age'],5).value_counts()

##################################
# Sibling Spouse #
##################
train_df['Survived'].groupby(train_df['SibSp']).mean()
train_df['SibSp'].value_counts()


#################################
# Parents and Childrend #
#########################
train_df['Survived'].groupby(train_df['Parch']).mean()
train_df['Parch'].value_counts()


# Feature Engineering
def names(train_df, test_df):
    for i in [train_df, test_df]:
        i['Name_Len'] = i['Name'].apply(lambda x: len(x))
        i['Name_Title'] = i['Name'].apply(lambda x: x.split(',')[1]).apply(lambda x: x.split()[0])
        del i['Name']
    return train_df, test_df

def age_impute(train_df, test_df):
    for i in [train_df, test_df]:
        i['Age_Null_Flag'] = i['Age'].apply(lambda x: 1 if pd.isnull(x) else 0)
        data = train.groupby(['Name_Title', 'Pclass'])['Age']
        i['Age'] = data.transform(lambda x: x.fillna(x.mean()))
    return train_df, test_df




